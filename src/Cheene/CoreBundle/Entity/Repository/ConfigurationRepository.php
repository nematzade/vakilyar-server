<?php

namespace Cheene\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * ConfigurationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConfigurationRepository extends EntityRepository
{
    /**
     * Get Value by Group Code and Key
     *
     * @param $groupCode
     * @param $key
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getValueBy($groupCode, $key)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('c.value')
            ->from('CoreBundle:Configuration', 'c')
            ->where($qb->expr()->eq('c.groupCode', ':groupCode'))->setParameter('groupCode', $groupCode)
            ->andWhere($qb->expr()->eq('c.key', ':key'))->setParameter('key', $key);

        try {
            $res = $qb->getQuery()->getSingleResult(Query::HYDRATE_ARRAY);
            return $res['value'];
        } catch (NoResultException $e) {
            throw new Exception('wrong state in database! (No Result)');
        } catch (NonUniqueResultException $e) {
            throw new Exception('wrong state in database! (Non Unique Result)');
        }
    }

    /**
     * Set value for a key by groupCode and Key
     *
     * @param $groupCode
     * @param $key
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function updateValue($groupCode, $key, $value)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->update('CoreBundle:Configuration', 'c')
            ->set('c.value',':value')
            ->where(
              $qb->expr()->andX(
                  $qb->expr()->eq('c.groupCode', ':group_code'),
                  $qb->expr()->eq('c.key', ':key')
              )
            )
            ->setParameter('value', $value)
            ->setParameter('group_code', $groupCode)
            ->setParameter('key', $key);
        return $qb->getQuery()->execute();
    }

}
